// <auto-generated />
using System;
using FinalProject_eGasSheba.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FinalProject_eGasSheba.Migrations
{
    [DbContext(typeof(AppDBcontext))]
    [Migration("20230309060808_egas0309")]
    partial class egas0309
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("FinalProject_eGasSheba.Model.accounts.cash", b =>
                {
                    b.Property<int>("cashID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("cashID"), 1L, 1);

                    b.Property<decimal?>("Credit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Debit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("HeadhNameID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Tday")
                        .HasColumnType("datetime2");

                    b.Property<string>("VoucherNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("hNameID")
                        .HasColumnType("int");

                    b.Property<int?>("jnalID")
                        .HasColumnType("int");

                    b.Property<string>("remark")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("cashID");

                    b.HasIndex("HeadhNameID");

                    b.HasIndex("jnalID");

                    b.ToTable("cash");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.accounts.GroupType", b =>
                {
                    b.Property<int>("groupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("groupId"), 1L, 1);

                    b.Property<string>("groupName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("groupId");

                    b.ToTable("groupType");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.accounts.Head", b =>
                {
                    b.Property<int>("hNameID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("hNameID"), 1L, 1);

                    b.Property<string>("HeadName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("groupId")
                        .HasColumnType("int");

                    b.HasKey("hNameID");

                    b.HasIndex("groupId");

                    b.ToTable("head");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.accounts.journal", b =>
                {
                    b.Property<int>("jnalID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("jnalID"), 1L, 1);

                    b.Property<decimal?>("Credit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Debit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("HeadhNameID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Tday")
                        .HasColumnType("datetime2");

                    b.Property<string>("VoucherNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("hNameID")
                        .HasColumnType("int");

                    b.Property<string>("invoiceMasterID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("remark")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("jnalID");

                    b.HasIndex("HeadhNameID");

                    b.HasIndex("invoiceMasterID");

                    b.ToTable("journal");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.accounts.Ledger", b =>
                {
                    b.Property<int>("LedgerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LedgerID"), 1L, 1);

                    b.Property<decimal?>("Credit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Debit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("detail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("headName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("jnalID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("lgerDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("remark")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("totalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("LedgerID");

                    b.HasIndex("jnalID");

                    b.ToTable("Ledger");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.accounts.TrailBalance", b =>
                {
                    b.Property<int>("trBlnceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("trBlnceId"), 1L, 1);

                    b.Property<decimal?>("Credit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Debit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("LedgerID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("remark")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("trblnceDate")
                        .HasColumnType("datetime2");

                    b.HasKey("trBlnceId");

                    b.HasIndex("LedgerID");

                    b.ToTable("trialBalance");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.child.Area", b =>
                {
                    b.Property<int>("aID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("aID"), 1L, 1);

                    b.Property<string>("areaName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("cityID")
                        .HasColumnType("int");

                    b.HasKey("aID");

                    b.ToTable("areas");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.child.City", b =>
                {
                    b.Property<int>("cityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("cityID"), 1L, 1);

                    b.Property<string>("cityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("cityID");

                    b.ToTable("cities");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.child.Condition", b =>
                {
                    b.Property<int>("coID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("coID"), 1L, 1);

                    b.Property<string>("Detail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("conditionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("coID");

                    b.ToTable("conditions");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.child.Dept", b =>
                {
                    b.Property<int>("depID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("depID"), 1L, 1);

                    b.Property<string>("depName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("depID");

                    b.ToTable("depts");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.child.Distributor", b =>
                {
                    b.Property<int>("dID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("dID"), 1L, 1);

                    b.Property<string>("distributorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("dID");

                    b.ToTable("distributors");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.child.Gender", b =>
                {
                    b.Property<int>("Gid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Gid"), 1L, 1);

                    b.Property<string>("Gender_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Gid");

                    b.ToTable("genders");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.child.payment_type", b =>
                {
                    b.Property<int>("paymentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("paymentID"), 1L, 1);

                    b.Property<string>("paymentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("paymentID");

                    b.ToTable("payment_Types");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.child.product", b =>
                {
                    b.Property<int>("proID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("proID"), 1L, 1);

                    b.Property<int>("DistributorID")
                        .HasColumnType("int");

                    b.Property<int?>("depID")
                        .HasColumnType("int");

                    b.Property<decimal?>("price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("proDetail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("proImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("proName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("proType")
                        .HasColumnType("int");

                    b.Property<int?>("proWeight")
                        .HasColumnType("int");

                    b.Property<decimal?>("size")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("proID");

                    b.HasIndex("DistributorID");

                    b.HasIndex("depID");

                    b.HasIndex("proType");

                    b.HasIndex("proWeight");

                    b.ToTable("products");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.child.Type", b =>
                {
                    b.Property<int>("tID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("tID"), 1L, 1);

                    b.Property<string>("typeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("tID");

                    b.ToTable("types");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.child.Weight", b =>
                {
                    b.Property<int>("wID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("wID"), 1L, 1);

                    b.Property<decimal>("weight1")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("wID");

                    b.ToTable("weights");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.marketing.campaign", b =>
                {
                    b.Property<int>("campID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("campID"), 1L, 1);

                    b.Property<string>("campName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("campID");

                    b.ToTable("campaigns");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.marketing.designation", b =>
                {
                    b.Property<int>("designationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("designationID"), 1L, 1);

                    b.Property<string>("designationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("designationID");

                    b.ToTable("designations");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.marketing.educationQualification", b =>
                {
                    b.Property<int>("eduQualificationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("eduQualificationID"), 1L, 1);

                    b.Property<string>("qualificationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("eduQualificationID");

                    b.ToTable("educationQualifications");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.marketing.empDepartment", b =>
                {
                    b.Property<int>("empDepID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("empDepID"), 1L, 1);

                    b.Property<string>("depName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("empDepID");

                    b.ToTable("empDepartments");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.marketing.employee", b =>
                {
                    b.Property<int>("empID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("empID"), 1L, 1);

                    b.Property<int>("Gid")
                        .HasColumnType("int");

                    b.Property<string>("NID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("aID")
                        .HasColumnType("int");

                    b.Property<int>("cityID")
                        .HasColumnType("int");

                    b.Property<int?>("designationID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("eduQualificationID")
                        .HasColumnType("int");

                    b.Property<int?>("empDepID")
                        .HasColumnType("int");

                    b.Property<string>("empName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("experience")
                        .HasColumnType("int");

                    b.Property<int?>("experienceID")
                        .HasColumnType("int");

                    b.Property<string>("house_No")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("joinDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("phone_01")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phone_02")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("photo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("road_No")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("empID");

                    b.HasIndex("Gid");

                    b.HasIndex("aID");

                    b.HasIndex("cityID");

                    b.HasIndex("designationID");

                    b.HasIndex("eduQualificationID");

                    b.HasIndex("empDepID");

                    b.HasIndex("experienceID");

                    b.ToTable("employees");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.marketing.markting", b =>
                {
                    b.Property<int>("mktID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("mktID"), 1L, 1);

                    b.Property<bool?>("Terminate")
                        .HasColumnType("bit");

                    b.Property<int>("aID")
                        .HasColumnType("int");

                    b.Property<int?>("campID")
                        .HasColumnType("int");

                    b.Property<int>("cityID")
                        .HasColumnType("int");

                    b.Property<string>("companyCustomer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("descriptions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("empID")
                        .HasColumnType("int");

                    b.Property<string>("house_No")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("nextVisit")
                        .HasColumnType("datetime2");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("preson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("recomendation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("road_No")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("today")
                        .HasColumnType("datetime2");

                    b.Property<string>("valuation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("mktID");

                    b.HasIndex("aID");

                    b.HasIndex("campID");

                    b.HasIndex("cityID");

                    b.HasIndex("empID");

                    b.ToTable("marketings");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.product.customer", b =>
                {
                    b.Property<string>("customerID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Genderid")
                        .HasColumnType("int");

                    b.Property<int>("aearID")
                        .HasColumnType("int");

                    b.Property<int>("cityID")
                        .HasColumnType("int");

                    b.Property<string>("customerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("customer_Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("dob")
                        .HasColumnType("datetime2");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("house_No")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phone_01")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phone_02")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("photo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("road_No")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("customerID");

                    b.HasIndex("Genderid");

                    b.HasIndex("aearID");

                    b.HasIndex("cityID");

                    b.HasIndex("customer_Type");

                    b.ToTable("customers");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.product.Experience", b =>
                {
                    b.Property<int>("experienceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("experienceID"), 1L, 1);

                    b.Property<string>("descriptions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("numerOfYear")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("experienceID");

                    b.ToTable("experiences");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.puechase.purchaseDetail", b =>
                {
                    b.Property<string>("Vo_No")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnOrder(0);

                    b.Property<string>("SI_No")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnOrder(1);

                    b.Property<string>("POrMaster")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("proID")
                        .HasColumnType("int");

                    b.Property<int>("productproID")
                        .HasColumnType("int");

                    b.Property<string>("purchaseID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("purchaseOrderMasterPOrMaster")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal?>("subTotal")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Vo_No", "SI_No");

                    b.HasIndex("productproID");

                    b.HasIndex("purchaseID");

                    b.HasIndex("purchaseOrderMasterPOrMaster");

                    b.ToTable("purchaseDetails");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.puechase.purchaseMaster", b =>
                {
                    b.Property<string>("purchaseID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Payment_TypepaymentID")
                        .HasColumnType("int");

                    b.Property<decimal?>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("aID")
                        .HasColumnType("int");

                    b.Property<int>("cityID")
                        .HasColumnType("int");

                    b.Property<int>("coID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("date_time")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("delivaryCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("due")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("gross")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("netAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("paid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("paymentID")
                        .HasColumnType("int");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("road_No")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("supplierCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("supplierID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("purchaseID");

                    b.HasIndex("Payment_TypepaymentID");

                    b.HasIndex("aID");

                    b.HasIndex("cityID");

                    b.HasIndex("coID");

                    b.HasIndex("supplierID");

                    b.ToTable("purchaseMasters");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.puechase.purchaseOrderDetali", b =>
                {
                    b.Property<string>("Vo_No")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SI_No")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("POrMaster")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal?>("price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("proID")
                        .HasColumnType("int");

                    b.Property<int>("productproID")
                        .HasColumnType("int");

                    b.Property<int?>("qty")
                        .HasColumnType("int");

                    b.Property<decimal?>("subTotal")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Vo_No", "SI_No");

                    b.HasIndex("POrMaster");

                    b.HasIndex("productproID");

                    b.ToTable("purchaseOrderDetalis");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.puechase.purchaseOrderMaster", b =>
                {
                    b.Property<string>("POrMaster")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal?>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("aID")
                        .HasColumnType("int");

                    b.Property<int>("cityID")
                        .HasColumnType("int");

                    b.Property<int>("coID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("date_time")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("delivaryCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("due")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("gross")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("netAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("paid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("road_No")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("supplierCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("supplierID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("POrMaster");

                    b.HasIndex("aID");

                    b.HasIndex("cityID");

                    b.HasIndex("coID");

                    b.HasIndex("supplierID");

                    b.ToTable("purchaseOrderMasters");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.puechase.supplier", b =>
                {
                    b.Property<string>("supplierID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ConditionID")
                        .HasColumnType("int");

                    b.Property<string>("TIN_ID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("areaID")
                        .HasColumnType("int");

                    b.Property<int>("cityID")
                        .HasColumnType("int");

                    b.Property<string>("contract_person")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("credit_limit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("house_No")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("license_number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phone_01")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phone_02")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("photo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("road_No")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("supplierCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("supplierName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("supplier_Type")
                        .HasColumnType("int");

                    b.Property<decimal?>("tolerance")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("supplierID");

                    b.HasIndex("ConditionID");

                    b.HasIndex("areaID");

                    b.HasIndex("cityID");

                    b.HasIndex("supplier_Type");

                    b.ToTable("suppliers");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.sales.InvoiceDetailsProduct", b =>
                {
                    b.Property<string>("Vo_No")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SI_No")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("invoiceMasterID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal?>("price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("productID")
                        .HasColumnType("int");

                    b.Property<decimal?>("subTotal")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Vo_No", "SI_No");

                    b.HasIndex("invoiceMasterID");

                    b.HasIndex("productID");

                    b.ToTable("InvoiceDetailsServices");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.sales.InvoiceReceivedDetail", b =>
                {
                    b.Property<string>("Vo_No")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SI_No")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Condition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descreptions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("invoiceMasterID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool?>("leakage")
                        .HasColumnType("bit");

                    b.Property<string>("nozzleSize")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("sameDistribution")
                        .HasColumnType("bit");

                    b.Property<bool?>("sameWeight")
                        .HasColumnType("bit");

                    b.HasKey("Vo_No", "SI_No");

                    b.HasIndex("invoiceMasterID");

                    b.ToTable("invoiceReceivedDetails");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.sales.salesDetail", b =>
                {
                    b.Property<string>("Vo_No")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SI_No")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal?>("price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("productID")
                        .HasColumnType("int");

                    b.Property<int?>("qty")
                        .HasColumnType("int");

                    b.Property<string>("salesMasterID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal?>("subTotal")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Vo_No", "SI_No");

                    b.HasIndex("productID");

                    b.HasIndex("salesMasterID");

                    b.ToTable("salesDetails");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.sales.salesInvoiceMaster", b =>
                {
                    b.Property<string>("invoiceMasterID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal?>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("areaID")
                        .HasColumnType("int");

                    b.Property<int>("cityID")
                        .HasColumnType("int");

                    b.Property<string>("cutomerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("date_time")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("delivaryCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("deliveryManID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<decimal?>("discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("due")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("floorNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("gross")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("house_No")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("netAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("paid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("paymentID")
                        .HasColumnType("int");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("road_No")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("salesMasterID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal?>("totalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("invoiceMasterID");

                    b.HasIndex("areaID");

                    b.HasIndex("cityID");

                    b.HasIndex("deliveryManID");

                    b.HasIndex("paymentID");

                    b.HasIndex("salesMasterID");

                    b.ToTable("salesInvoiceMasters");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.sales.salesMaster", b =>
                {
                    b.Property<string>("salesMasterID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("PaymentTypepaymentID")
                        .HasColumnType("int");

                    b.Property<decimal?>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("areaID")
                        .HasColumnType("int");

                    b.Property<int>("cityID")
                        .HasColumnType("int");

                    b.Property<string>("cutomerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("date_time")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("delivaryCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("due")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("floorNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("gross")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("house_No")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("netAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("paid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("paymentID")
                        .HasColumnType("int");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("road_No")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("salesMasterID");

                    b.HasIndex("PaymentTypepaymentID");

                    b.HasIndex("areaID");

                    b.HasIndex("cityID");

                    b.ToTable("salesMasters");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.services.Appointment", b =>
                {
                    b.Property<string>("Appointment_ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AreaID")
                        .HasColumnType("int");

                    b.Property<int>("City")
                        .HasColumnType("int");

                    b.Property<string>("Condition_ID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Customer_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Floor_NO")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("House_No")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaymentType_ID")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProblemCategoryProblemCat_ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Road_NO")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Service_ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("cityID")
                        .HasColumnType("int");

                    b.HasKey("Appointment_ID");

                    b.HasIndex("AreaID");

                    b.HasIndex("PaymentType_ID");

                    b.HasIndex("ProblemCategoryProblemCat_ID");

                    b.HasIndex("Service_ID");

                    b.HasIndex("cityID");

                    b.ToTable("Appointment");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.services.Appointment_Details", b =>
                {
                    b.Property<string>("Vo_No")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SI_No")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Appointment_ID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProblemCat_ID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProblemDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Service_ID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Vo_No", "SI_No");

                    b.HasIndex("Appointment_ID");

                    b.HasIndex("ProblemCat_ID");

                    b.HasIndex("Service_ID");

                    b.ToTable("Appointment_Details");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.services.AppointmentApproval", b =>
                {
                    b.Property<string>("Approval_ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Appointment_ID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AreaID")
                        .HasColumnType("int");

                    b.Property<int>("City")
                        .HasColumnType("int");

                    b.Property<string>("Customer_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<double>("Discount")
                        .HasColumnType("float");

                    b.Property<string>("Feedback_ID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Floor_NO")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("House_No")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaymentType_ID")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("ProblemCategoryProblemCat_ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Road_NO")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Service_ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Technician_ID")
                        .HasColumnType("int");

                    b.Property<int?>("cityID")
                        .HasColumnType("int");

                    b.Property<double>("due")
                        .HasColumnType("float");

                    b.Property<double>("netAmount")
                        .HasColumnType("float");

                    b.Property<double>("paid")
                        .HasColumnType("float");

                    b.Property<int?>("productproID")
                        .HasColumnType("int");

                    b.Property<int>("technicianID")
                        .HasColumnType("int");

                    b.HasKey("Approval_ID");

                    b.HasIndex("AreaID");

                    b.HasIndex("Feedback_ID");

                    b.HasIndex("PaymentType_ID");

                    b.HasIndex("ProblemCategoryProblemCat_ID");

                    b.HasIndex("Service_ID");

                    b.HasIndex("cityID");

                    b.HasIndex("productproID");

                    b.HasIndex("technicianID");

                    b.ToTable("AppointmentApproval");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.services.Approval_Details", b =>
                {
                    b.Property<string>("Vo_No")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SI_No")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Approval_ID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Feedback_ID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Feedback_ID1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("ProblemCat_ID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Service_ID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Vo_No", "SI_No");

                    b.HasIndex("Approval_ID");

                    b.HasIndex("Feedback_ID1");

                    b.HasIndex("ProblemCat_ID");

                    b.HasIndex("Service_ID");

                    b.ToTable("Approval_Details");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.services.Feedback", b =>
                {
                    b.Property<string>("Feedback_ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Approval_ID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Feedback_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Technician_ID")
                        .HasColumnType("int");

                    b.HasKey("Feedback_ID");

                    b.HasIndex("Technician_ID");

                    b.ToTable("Feedback");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.services.Invoice_Details_Product", b =>
                {
                    b.Property<string>("Vo_No")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SI_No")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AppointmentApprovalApproval_ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Approval_ID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InvoiceMaster_ID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Price")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProblemCat_ID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProblemCategoryProblemCat_ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Product_ID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Service_ID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Service_ID1")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Vo_No", "SI_No");

                    b.HasIndex("AppointmentApprovalApproval_ID");

                    b.HasIndex("InvoiceMaster_ID");

                    b.HasIndex("ProblemCategoryProblemCat_ID");

                    b.HasIndex("Service_ID1");

                    b.ToTable("invoiceDetailsProducts");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.services.Invoice_Master", b =>
                {
                    b.Property<string>("InvoiceMaster_ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AppointmentApprovalApproval_ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Approval_ID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Area_ID")
                        .HasColumnType("int");

                    b.Property<int>("City_ID")
                        .HasColumnType("int");

                    b.Property<string>("Customer_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("DelivaryMan_ID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DeliveryMandelID")
                        .HasColumnType("int");

                    b.Property<string>("Floor_NO")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("House_No")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Payment_ID")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("ProblemCategoryProblemCat_ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Road_ID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Service_ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Technician_ID")
                        .HasColumnType("int");

                    b.Property<int>("technicianID")
                        .HasColumnType("int");

                    b.HasKey("InvoiceMaster_ID");

                    b.HasIndex("AppointmentApprovalApproval_ID");

                    b.HasIndex("Area_ID");

                    b.HasIndex("City_ID");

                    b.HasIndex("DeliveryMandelID");

                    b.HasIndex("Payment_ID");

                    b.HasIndex("ProblemCategoryProblemCat_ID");

                    b.HasIndex("Service_ID");

                    b.HasIndex("technicianID");

                    b.ToTable("Invoice_Master");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.services.ProblemCategory", b =>
                {
                    b.Property<string>("ProblemCat_ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProblemCat_ID");

                    b.ToTable("ProblemCategory");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.services.Service", b =>
                {
                    b.Property<string>("Service_ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Fee")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Service_Fee")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Service_ID");

                    b.ToTable("Service");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.stock.cylinderReturn", b =>
                {
                    b.Property<int>("cylinderReturnID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("cylinderReturnID"), 1L, 1);

                    b.Property<string>("attachedFileD")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("invoiceMasterID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("proID")
                        .HasColumnType("int");

                    b.Property<int>("slNO")
                        .HasColumnType("int");

                    b.HasKey("cylinderReturnID");

                    b.HasIndex("invoiceMasterID");

                    b.HasIndex("proID");

                    b.ToTable("cylinderReturn");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.stock.stock", b =>
                {
                    b.Property<int>("stkID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("stkID"), 1L, 1);

                    b.Property<int?>("Closing")
                        .HasColumnType("int");

                    b.Property<int?>("Issue")
                        .HasColumnType("int");

                    b.Property<int?>("Opening")
                        .HasColumnType("int");

                    b.Property<int?>("Receive")
                        .HasColumnType("int");

                    b.Property<decimal?>("deu")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("onDelivary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("paid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("proID")
                        .HasColumnType("int");

                    b.Property<string>("purchaseID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal?>("rate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("supplierID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal?>("totalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("stkID");

                    b.HasIndex("proID");

                    b.HasIndex("purchaseID");

                    b.HasIndex("supplierID");

                    b.ToTable("stock");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.technician_Delivary.deliveryMan", b =>
                {
                    b.Property<int>("delID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("delID"), 1L, 1);

                    b.Property<int>("Experience1experienceID")
                        .HasColumnType("int");

                    b.Property<int>("Gid")
                        .HasColumnType("int");

                    b.Property<string>("NID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("aID")
                        .HasColumnType("int");

                    b.Property<int>("cityID")
                        .HasColumnType("int");

                    b.Property<int>("coID")
                        .HasColumnType("int");

                    b.Property<string>("delName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("experience")
                        .HasColumnType("int");

                    b.Property<string>("house_No")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phone_01")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phone_02")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("photo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("road_No")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("delID");

                    b.HasIndex("Experience1experienceID");

                    b.HasIndex("Gid");

                    b.HasIndex("aID");

                    b.HasIndex("cityID");

                    b.HasIndex("coID");

                    b.ToTable("deliveryMan");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.technician_Delivary.technician", b =>
                {
                    b.Property<int>("technicianID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("technicianID"), 1L, 1);

                    b.Property<int>("Gid")
                        .HasColumnType("int");

                    b.Property<int>("TypetID")
                        .HasColumnType("int");

                    b.Property<int>("aID")
                        .HasColumnType("int");

                    b.Property<int>("cityID")
                        .HasColumnType("int");

                    b.Property<int>("coID")
                        .HasColumnType("int");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("experienceID")
                        .HasColumnType("int");

                    b.Property<string>("house_No")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phone_01")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phone_02")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("photo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("road_No")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("technicianName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("technician_Type")
                        .HasColumnType("int");

                    b.HasKey("technicianID");

                    b.HasIndex("Gid");

                    b.HasIndex("TypetID");

                    b.HasIndex("aID");

                    b.HasIndex("cityID");

                    b.HasIndex("coID");

                    b.HasIndex("experienceID");

                    b.ToTable("technician");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.training.cours", b =>
                {
                    b.Property<int>("coureID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("coureID"), 1L, 1);

                    b.Property<string>("courName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("durationday")
                        .HasColumnType("int");

                    b.Property<decimal?>("price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("coureID");

                    b.ToTable("course");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.training.courseSaleDetail", b =>
                {
                    b.Property<int>("VoNO")
                        .HasColumnType("int");

                    b.Property<int>("slNO")
                        .HasColumnType("int");

                    b.Property<int?>("MasterID")
                        .HasColumnType("int");

                    b.Property<int?>("courID")
                        .HasColumnType("int");

                    b.Property<int?>("instructorID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("quantity")
                        .HasColumnType("int");

                    b.HasKey("VoNO", "slNO");

                    b.HasIndex("MasterID");

                    b.HasIndex("courID");

                    b.HasIndex("instructorID");

                    b.ToTable("courseSaleDetail");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.training.courseSaleMaster", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<string>("cusAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("customerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("dateTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("due")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("paid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("totalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("id");

                    b.ToTable("courseSaleMaster");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.training.courseSchedule", b =>
                {
                    b.Property<int>("slNO")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("slNO"), 1L, 1);

                    b.Property<int?>("courID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("instructorID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("locations")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan?>("time")
                        .HasColumnType("time");

                    b.HasKey("slNO");

                    b.HasIndex("courID");

                    b.HasIndex("instructorID");

                    b.ToTable("courseSchedule");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.training.instructor", b =>
                {
                    b.Property<int>("instructorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("instructorID"), 1L, 1);

                    b.Property<int?>("GenderGid")
                        .HasColumnType("int");

                    b.Property<int>("Gid")
                        .HasColumnType("int");

                    b.Property<string>("NID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("aID")
                        .HasColumnType("int");

                    b.Property<int>("cityID")
                        .HasColumnType("int");

                    b.Property<int?>("eduQualificationID")
                        .HasColumnType("int");

                    b.Property<int>("educationQualificationeduQualificationID")
                        .HasColumnType("int");

                    b.Property<string>("experience")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("house_No")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("intsName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phone_01")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phone_02")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("photo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("road_No")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("instructorID");

                    b.HasIndex("GenderGid");

                    b.HasIndex("aID");

                    b.HasIndex("cityID");

                    b.HasIndex("educationQualificationeduQualificationID");

                    b.ToTable("instructor");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.accounts.cash", b =>
                {
                    b.HasOne("FinalProject_eGasSheba.Model.accounts.Head", "Head")
                        .WithMany("cashes")
                        .HasForeignKey("HeadhNameID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FinalProject_eGasSheba.Model.accounts.journal", "journal")
                        .WithMany("cashes")
                        .HasForeignKey("jnalID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Head");

                    b.Navigation("journal");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.accounts.Head", b =>
                {
                    b.HasOne("FinalProject_eGasSheba.Model.accounts.GroupType", "GroupType")
                        .WithMany("Heads")
                        .HasForeignKey("groupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("GroupType");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.accounts.journal", b =>
                {
                    b.HasOne("FinalProject_eGasSheba.Model.accounts.Head", "Head")
                        .WithMany("journals")
                        .HasForeignKey("HeadhNameID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FinalProject_eGasSheba.Model.sales.salesInvoiceMaster", "salesInvoiceMaster")
                        .WithMany("journals")
                        .HasForeignKey("invoiceMasterID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Head");

                    b.Navigation("salesInvoiceMaster");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.accounts.Ledger", b =>
                {
                    b.HasOne("FinalProject_eGasSheba.Model.accounts.journal", "journal")
                        .WithMany("Ledgers")
                        .HasForeignKey("jnalID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("journal");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.accounts.TrailBalance", b =>
                {
                    b.HasOne("FinalProject_eGasSheba.Model.accounts.Ledger", "Ledger")
                        .WithMany("TrailBalances")
                        .HasForeignKey("LedgerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Ledger");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.child.product", b =>
                {
                    b.HasOne("FinalProject_eGasSheba.Model.child.Distributor", "Distributor")
                        .WithMany("products")
                        .HasForeignKey("DistributorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FinalProject_eGasSheba.Model.child.Dept", "Dept")
                        .WithMany("products")
                        .HasForeignKey("depID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FinalProject_eGasSheba.Model.child.Type", "Type")
                        .WithMany("products")
                        .HasForeignKey("proType")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FinalProject_eGasSheba.Model.child.Weight", "Weight")
                        .WithMany("products")
                        .HasForeignKey("proWeight")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Dept");

                    b.Navigation("Distributor");

                    b.Navigation("Type");

                    b.Navigation("Weight");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.marketing.employee", b =>
                {
                    b.HasOne("FinalProject_eGasSheba.Model.child.Gender", "Gender")
                        .WithMany("Employees")
                        .HasForeignKey("Gid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FinalProject_eGasSheba.Model.child.Area", "Area")
                        .WithMany("employees")
                        .HasForeignKey("aID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FinalProject_eGasSheba.Model.child.City", "City")
                        .WithMany("employees")
                        .HasForeignKey("cityID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FinalProject_eGasSheba.Model.marketing.designation", "designation")
                        .WithMany("employees")
                        .HasForeignKey("designationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FinalProject_eGasSheba.Model.marketing.educationQualification", "educationQualification")
                        .WithMany("employees")
                        .HasForeignKey("eduQualificationID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FinalProject_eGasSheba.Model.marketing.empDepartment", "empDepartment")
                        .WithMany("employees")
                        .HasForeignKey("empDepID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FinalProject_eGasSheba.Model.product.Experience", null)
                        .WithMany("Employees")
                        .HasForeignKey("experienceID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Area");

                    b.Navigation("City");

                    b.Navigation("Gender");

                    b.Navigation("designation");

                    b.Navigation("educationQualification");

                    b.Navigation("empDepartment");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.marketing.markting", b =>
                {
                    b.HasOne("FinalProject_eGasSheba.Model.child.Area", "Area")
                        .WithMany("marktings")
                        .HasForeignKey("aID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FinalProject_eGasSheba.Model.marketing.campaign", "campaign")
                        .WithMany("marktings")
                        .HasForeignKey("campID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FinalProject_eGasSheba.Model.child.City", "City")
                        .WithMany("marktings")
                        .HasForeignKey("cityID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FinalProject_eGasSheba.Model.marketing.employee", "employee")
                        .WithMany("marktings")
                        .HasForeignKey("empID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Area");

                    b.Navigation("City");

                    b.Navigation("campaign");

                    b.Navigation("employee");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.product.customer", b =>
                {
                    b.HasOne("FinalProject_eGasSheba.Model.child.Gender", "Gender")
                        .WithMany("customers")
                        .HasForeignKey("Genderid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FinalProject_eGasSheba.Model.child.Area", "Area")
                        .WithMany("customers")
                        .HasForeignKey("aearID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FinalProject_eGasSheba.Model.child.City", "City")
                        .WithMany("customers")
                        .HasForeignKey("cityID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FinalProject_eGasSheba.Model.child.Type", "Type")
                        .WithMany("customers")
                        .HasForeignKey("customer_Type")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("City");

                    b.Navigation("Gender");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.puechase.purchaseDetail", b =>
                {
                    b.HasOne("FinalProject_eGasSheba.Model.child.product", "product")
                        .WithMany("purchaseDetails")
                        .HasForeignKey("productproID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FinalProject_eGasSheba.Model.puechase.purchaseMaster", "purchaseMaster")
                        .WithMany("purchaseDetails")
                        .HasForeignKey("purchaseID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FinalProject_eGasSheba.Model.puechase.purchaseOrderMaster", null)
                        .WithMany("purchaseDetails")
                        .HasForeignKey("purchaseOrderMasterPOrMaster")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("product");

                    b.Navigation("purchaseMaster");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.puechase.purchaseMaster", b =>
                {
                    b.HasOne("FinalProject_eGasSheba.Model.child.payment_type", "Payment_Type")
                        .WithMany("PurchaseMasters")
                        .HasForeignKey("Payment_TypepaymentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FinalProject_eGasSheba.Model.child.Area", "Area")
                        .WithMany("purchaseMasters")
                        .HasForeignKey("aID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FinalProject_eGasSheba.Model.child.City", "City")
                        .WithMany("purchaseMasters")
                        .HasForeignKey("cityID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FinalProject_eGasSheba.Model.child.Condition", "Condition")
                        .WithMany("purchaseMasters")
                        .HasForeignKey("coID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FinalProject_eGasSheba.Model.puechase.supplier", "supplier")
                        .WithMany("purchaseMasters")
                        .HasForeignKey("supplierID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("City");

                    b.Navigation("Condition");

                    b.Navigation("Payment_Type");

                    b.Navigation("supplier");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.puechase.purchaseOrderDetali", b =>
                {
                    b.HasOne("FinalProject_eGasSheba.Model.puechase.purchaseOrderMaster", "purchaseOrderMaster")
                        .WithMany("purchaseOrderDetalis")
                        .HasForeignKey("POrMaster")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FinalProject_eGasSheba.Model.child.product", "product")
                        .WithMany("purchaseOrderDetalis")
                        .HasForeignKey("productproID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("product");

                    b.Navigation("purchaseOrderMaster");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.puechase.purchaseOrderMaster", b =>
                {
                    b.HasOne("FinalProject_eGasSheba.Model.child.Area", "Area")
                        .WithMany("purchaseOrderMasters")
                        .HasForeignKey("aID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FinalProject_eGasSheba.Model.child.City", "City")
                        .WithMany("purchaseOrderMasters")
                        .HasForeignKey("cityID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FinalProject_eGasSheba.Model.child.Condition", "Condition")
                        .WithMany("purchaseOrderMasters")
                        .HasForeignKey("coID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FinalProject_eGasSheba.Model.puechase.supplier", "supplier")
                        .WithMany("purchaseOrderMasters")
                        .HasForeignKey("supplierID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("City");

                    b.Navigation("Condition");

                    b.Navigation("supplier");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.puechase.supplier", b =>
                {
                    b.HasOne("FinalProject_eGasSheba.Model.child.Condition", "Condition")
                        .WithMany("suppliers")
                        .HasForeignKey("ConditionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FinalProject_eGasSheba.Model.child.Area", "Area")
                        .WithMany("suppliers")
                        .HasForeignKey("areaID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FinalProject_eGasSheba.Model.child.City", "City")
                        .WithMany("suppliers")
                        .HasForeignKey("cityID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FinalProject_eGasSheba.Model.child.Type", "Type")
                        .WithMany("suppliers")
                        .HasForeignKey("supplier_Type")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("City");

                    b.Navigation("Condition");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.sales.InvoiceDetailsProduct", b =>
                {
                    b.HasOne("FinalProject_eGasSheba.Model.sales.salesInvoiceMaster", "salesInvoiceMaster")
                        .WithMany("InvoiceDetailsProducts")
                        .HasForeignKey("invoiceMasterID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FinalProject_eGasSheba.Model.child.product", "product")
                        .WithMany("InvoiceDetailsProducts")
                        .HasForeignKey("productID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("product");

                    b.Navigation("salesInvoiceMaster");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.sales.InvoiceReceivedDetail", b =>
                {
                    b.HasOne("FinalProject_eGasSheba.Model.sales.salesInvoiceMaster", "salesInvoiceMaster")
                        .WithMany("InvoiceReceivedDetails")
                        .HasForeignKey("invoiceMasterID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("salesInvoiceMaster");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.sales.salesDetail", b =>
                {
                    b.HasOne("FinalProject_eGasSheba.Model.child.product", "product")
                        .WithMany("salesDetails")
                        .HasForeignKey("productID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FinalProject_eGasSheba.Model.sales.salesMaster", "salesMaster")
                        .WithMany("salesDetails")
                        .HasForeignKey("salesMasterID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("product");

                    b.Navigation("salesMaster");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.sales.salesInvoiceMaster", b =>
                {
                    b.HasOne("FinalProject_eGasSheba.Model.child.Area", "Area")
                        .WithMany("salesInvoiceMasters")
                        .HasForeignKey("areaID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FinalProject_eGasSheba.Model.child.City", "City")
                        .WithMany("salesInvoiceMasters")
                        .HasForeignKey("cityID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FinalProject_eGasSheba.Model.technician_Delivary.deliveryMan", "deliveryMan")
                        .WithMany("salesInvoiceMasters")
                        .HasForeignKey("deliveryManID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FinalProject_eGasSheba.Model.child.payment_type", "payment_type")
                        .WithMany("salesInvoiceMasters")
                        .HasForeignKey("paymentID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FinalProject_eGasSheba.Model.sales.salesMaster", "salesMaster")
                        .WithMany("salesInvoiceMasters")
                        .HasForeignKey("salesMasterID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("City");

                    b.Navigation("deliveryMan");

                    b.Navigation("payment_type");

                    b.Navigation("salesMaster");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.sales.salesMaster", b =>
                {
                    b.HasOne("FinalProject_eGasSheba.Model.child.payment_type", "PaymentType")
                        .WithMany("salesMastersMasters")
                        .HasForeignKey("PaymentTypepaymentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FinalProject_eGasSheba.Model.child.Area", "Area")
                        .WithMany("salesMasters")
                        .HasForeignKey("areaID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FinalProject_eGasSheba.Model.child.City", "City")
                        .WithMany("salesMasters")
                        .HasForeignKey("cityID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("City");

                    b.Navigation("PaymentType");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.services.Appointment", b =>
                {
                    b.HasOne("FinalProject_eGasSheba.Model.child.Area", "Area")
                        .WithMany("Appointments")
                        .HasForeignKey("AreaID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FinalProject_eGasSheba.Model.child.payment_type", "PaymentTypes")
                        .WithMany()
                        .HasForeignKey("PaymentType_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FinalProject_eGasSheba.Model.services.ProblemCategory", null)
                        .WithMany("Appointment")
                        .HasForeignKey("ProblemCategoryProblemCat_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FinalProject_eGasSheba.Model.services.Service", null)
                        .WithMany("Appointment")
                        .HasForeignKey("Service_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FinalProject_eGasSheba.Model.child.City", null)
                        .WithMany("appointments")
                        .HasForeignKey("cityID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Area");

                    b.Navigation("PaymentTypes");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.services.Appointment_Details", b =>
                {
                    b.HasOne("FinalProject_eGasSheba.Model.services.Appointment", "Appointment")
                        .WithMany("Appointment_Details")
                        .HasForeignKey("Appointment_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FinalProject_eGasSheba.Model.services.ProblemCategory", "ProblemCategory")
                        .WithMany("Appointment_Details")
                        .HasForeignKey("ProblemCat_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FinalProject_eGasSheba.Model.services.Service", "Service")
                        .WithMany("Appointment_Details")
                        .HasForeignKey("Service_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("ProblemCategory");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.services.AppointmentApproval", b =>
                {
                    b.HasOne("FinalProject_eGasSheba.Model.child.Area", "Area")
                        .WithMany("AppointmentApprovals")
                        .HasForeignKey("AreaID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FinalProject_eGasSheba.Model.services.Feedback", "Feedback")
                        .WithMany("AppointmentApproval")
                        .HasForeignKey("Feedback_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FinalProject_eGasSheba.Model.child.payment_type", "PaymentTypes")
                        .WithMany("appointmentApproveds")
                        .HasForeignKey("PaymentType_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FinalProject_eGasSheba.Model.services.ProblemCategory", null)
                        .WithMany("AppointmentApproval")
                        .HasForeignKey("ProblemCategoryProblemCat_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FinalProject_eGasSheba.Model.services.Service", null)
                        .WithMany("AppointmentApproval")
                        .HasForeignKey("Service_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FinalProject_eGasSheba.Model.child.City", null)
                        .WithMany("appointmentApproveds")
                        .HasForeignKey("cityID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FinalProject_eGasSheba.Model.child.product", null)
                        .WithMany("appointmentApproveds")
                        .HasForeignKey("productproID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FinalProject_eGasSheba.Model.technician_Delivary.technician", "Technician")
                        .WithMany("appointmentApproveds")
                        .HasForeignKey("technicianID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("Feedback");

                    b.Navigation("PaymentTypes");

                    b.Navigation("Technician");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.services.Approval_Details", b =>
                {
                    b.HasOne("FinalProject_eGasSheba.Model.services.AppointmentApproval", "AppointmentApproval")
                        .WithMany("Approval_Details")
                        .HasForeignKey("Approval_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FinalProject_eGasSheba.Model.services.Feedback", null)
                        .WithMany("Approval_Details")
                        .HasForeignKey("Feedback_ID1")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FinalProject_eGasSheba.Model.services.ProblemCategory", "ProblemCategory")
                        .WithMany("Approval_Details")
                        .HasForeignKey("ProblemCat_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FinalProject_eGasSheba.Model.services.Service", "Service")
                        .WithMany("Approval_Details")
                        .HasForeignKey("Service_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AppointmentApproval");

                    b.Navigation("ProblemCategory");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.services.Feedback", b =>
                {
                    b.HasOne("FinalProject_eGasSheba.Model.technician_Delivary.technician", "technician")
                        .WithMany("Feedback")
                        .HasForeignKey("Technician_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("technician");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.services.Invoice_Details_Product", b =>
                {
                    b.HasOne("FinalProject_eGasSheba.Model.services.AppointmentApproval", null)
                        .WithMany("Invoice_Details_Product")
                        .HasForeignKey("AppointmentApprovalApproval_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FinalProject_eGasSheba.Model.services.Invoice_Master", "Invoice_Master")
                        .WithMany("Invoice_Details_Product")
                        .HasForeignKey("InvoiceMaster_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FinalProject_eGasSheba.Model.services.ProblemCategory", null)
                        .WithMany("Invoice_Details_Product")
                        .HasForeignKey("ProblemCategoryProblemCat_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FinalProject_eGasSheba.Model.services.Service", null)
                        .WithMany("Invoice_Details_Product")
                        .HasForeignKey("Service_ID1")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Invoice_Master");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.services.Invoice_Master", b =>
                {
                    b.HasOne("FinalProject_eGasSheba.Model.services.AppointmentApproval", null)
                        .WithMany("Invoice_Master")
                        .HasForeignKey("AppointmentApprovalApproval_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FinalProject_eGasSheba.Model.child.Area", "Area")
                        .WithMany()
                        .HasForeignKey("Area_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FinalProject_eGasSheba.Model.child.City", "City")
                        .WithMany()
                        .HasForeignKey("City_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FinalProject_eGasSheba.Model.technician_Delivary.deliveryMan", "DeliveryMan")
                        .WithMany()
                        .HasForeignKey("DeliveryMandelID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FinalProject_eGasSheba.Model.child.payment_type", "PaymentTypes")
                        .WithMany()
                        .HasForeignKey("Payment_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FinalProject_eGasSheba.Model.services.ProblemCategory", null)
                        .WithMany("Invoice_Master")
                        .HasForeignKey("ProblemCategoryProblemCat_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FinalProject_eGasSheba.Model.services.Service", null)
                        .WithMany("Invoice_Master")
                        .HasForeignKey("Service_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FinalProject_eGasSheba.Model.technician_Delivary.technician", "Technician")
                        .WithMany("Invoice_Master")
                        .HasForeignKey("technicianID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("City");

                    b.Navigation("DeliveryMan");

                    b.Navigation("PaymentTypes");

                    b.Navigation("Technician");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.stock.cylinderReturn", b =>
                {
                    b.HasOne("FinalProject_eGasSheba.Model.sales.salesInvoiceMaster", "salesInvoiceMaster")
                        .WithMany("cylinderReturns")
                        .HasForeignKey("invoiceMasterID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FinalProject_eGasSheba.Model.child.product", "product")
                        .WithMany("cylinderReturns")
                        .HasForeignKey("proID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("product");

                    b.Navigation("salesInvoiceMaster");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.stock.stock", b =>
                {
                    b.HasOne("FinalProject_eGasSheba.Model.child.product", "product")
                        .WithMany("stocks")
                        .HasForeignKey("proID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FinalProject_eGasSheba.Model.puechase.purchaseMaster", "purchaseMaster")
                        .WithMany("stocks")
                        .HasForeignKey("purchaseID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FinalProject_eGasSheba.Model.puechase.supplier", null)
                        .WithMany("stocks")
                        .HasForeignKey("supplierID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("product");

                    b.Navigation("purchaseMaster");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.technician_Delivary.deliveryMan", b =>
                {
                    b.HasOne("FinalProject_eGasSheba.Model.product.Experience", "Experience1")
                        .WithMany("deliveryMen")
                        .HasForeignKey("Experience1experienceID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FinalProject_eGasSheba.Model.child.Gender", "Gender")
                        .WithMany("deliveryMen")
                        .HasForeignKey("Gid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FinalProject_eGasSheba.Model.child.Area", "Area")
                        .WithMany("deliveryMen")
                        .HasForeignKey("aID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FinalProject_eGasSheba.Model.child.City", "City")
                        .WithMany("deliveryMen")
                        .HasForeignKey("cityID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FinalProject_eGasSheba.Model.child.Condition", "Condition")
                        .WithMany("deliveryMen")
                        .HasForeignKey("coID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("City");

                    b.Navigation("Condition");

                    b.Navigation("Experience1");

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.technician_Delivary.technician", b =>
                {
                    b.HasOne("FinalProject_eGasSheba.Model.child.Gender", "Gender")
                        .WithMany("technicians")
                        .HasForeignKey("Gid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FinalProject_eGasSheba.Model.child.Type", "Type")
                        .WithMany("technicians")
                        .HasForeignKey("TypetID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FinalProject_eGasSheba.Model.child.Area", "Area")
                        .WithMany("technicians")
                        .HasForeignKey("aID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FinalProject_eGasSheba.Model.child.City", "City")
                        .WithMany("technicians")
                        .HasForeignKey("cityID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FinalProject_eGasSheba.Model.child.Condition", "Condition")
                        .WithMany("technicians")
                        .HasForeignKey("coID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FinalProject_eGasSheba.Model.product.Experience", "Experience")
                        .WithMany("technicians")
                        .HasForeignKey("experienceID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Area");

                    b.Navigation("City");

                    b.Navigation("Condition");

                    b.Navigation("Experience");

                    b.Navigation("Gender");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.training.courseSaleDetail", b =>
                {
                    b.HasOne("FinalProject_eGasSheba.Model.training.courseSaleMaster", "courseSaleMaster")
                        .WithMany("courseSaleDetails")
                        .HasForeignKey("MasterID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FinalProject_eGasSheba.Model.training.cours", "cours")
                        .WithMany("courseSaleDetails")
                        .HasForeignKey("courID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FinalProject_eGasSheba.Model.training.instructor", "instructor")
                        .WithMany("courseSaleDetails")
                        .HasForeignKey("instructorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("cours");

                    b.Navigation("courseSaleMaster");

                    b.Navigation("instructor");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.training.courseSchedule", b =>
                {
                    b.HasOne("FinalProject_eGasSheba.Model.training.cours", "cours")
                        .WithMany("courseSchedules")
                        .HasForeignKey("courID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FinalProject_eGasSheba.Model.training.instructor", "instructor")
                        .WithMany("courseSchedules")
                        .HasForeignKey("instructorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("cours");

                    b.Navigation("instructor");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.training.instructor", b =>
                {
                    b.HasOne("FinalProject_eGasSheba.Model.child.Gender", null)
                        .WithMany("Instructors")
                        .HasForeignKey("GenderGid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FinalProject_eGasSheba.Model.child.Area", "Area")
                        .WithMany("instructors")
                        .HasForeignKey("aID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FinalProject_eGasSheba.Model.child.City", "City")
                        .WithMany("instructors")
                        .HasForeignKey("cityID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FinalProject_eGasSheba.Model.marketing.educationQualification", "educationQualification")
                        .WithMany("instructors")
                        .HasForeignKey("educationQualificationeduQualificationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("City");

                    b.Navigation("educationQualification");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.accounts.GroupType", b =>
                {
                    b.Navigation("Heads");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.accounts.Head", b =>
                {
                    b.Navigation("cashes");

                    b.Navigation("journals");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.accounts.journal", b =>
                {
                    b.Navigation("Ledgers");

                    b.Navigation("cashes");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.accounts.Ledger", b =>
                {
                    b.Navigation("TrailBalances");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.child.Area", b =>
                {
                    b.Navigation("AppointmentApprovals");

                    b.Navigation("Appointments");

                    b.Navigation("customers");

                    b.Navigation("deliveryMen");

                    b.Navigation("employees");

                    b.Navigation("instructors");

                    b.Navigation("marktings");

                    b.Navigation("purchaseMasters");

                    b.Navigation("purchaseOrderMasters");

                    b.Navigation("salesInvoiceMasters");

                    b.Navigation("salesMasters");

                    b.Navigation("suppliers");

                    b.Navigation("technicians");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.child.City", b =>
                {
                    b.Navigation("appointmentApproveds");

                    b.Navigation("appointments");

                    b.Navigation("customers");

                    b.Navigation("deliveryMen");

                    b.Navigation("employees");

                    b.Navigation("instructors");

                    b.Navigation("marktings");

                    b.Navigation("purchaseMasters");

                    b.Navigation("purchaseOrderMasters");

                    b.Navigation("salesInvoiceMasters");

                    b.Navigation("salesMasters");

                    b.Navigation("suppliers");

                    b.Navigation("technicians");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.child.Condition", b =>
                {
                    b.Navigation("deliveryMen");

                    b.Navigation("purchaseMasters");

                    b.Navigation("purchaseOrderMasters");

                    b.Navigation("suppliers");

                    b.Navigation("technicians");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.child.Dept", b =>
                {
                    b.Navigation("products");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.child.Distributor", b =>
                {
                    b.Navigation("products");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.child.Gender", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("Instructors");

                    b.Navigation("customers");

                    b.Navigation("deliveryMen");

                    b.Navigation("technicians");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.child.payment_type", b =>
                {
                    b.Navigation("PurchaseMasters");

                    b.Navigation("appointmentApproveds");

                    b.Navigation("salesInvoiceMasters");

                    b.Navigation("salesMastersMasters");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.child.product", b =>
                {
                    b.Navigation("InvoiceDetailsProducts");

                    b.Navigation("appointmentApproveds");

                    b.Navigation("cylinderReturns");

                    b.Navigation("purchaseDetails");

                    b.Navigation("purchaseOrderDetalis");

                    b.Navigation("salesDetails");

                    b.Navigation("stocks");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.child.Type", b =>
                {
                    b.Navigation("customers");

                    b.Navigation("products");

                    b.Navigation("suppliers");

                    b.Navigation("technicians");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.child.Weight", b =>
                {
                    b.Navigation("products");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.marketing.campaign", b =>
                {
                    b.Navigation("marktings");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.marketing.designation", b =>
                {
                    b.Navigation("employees");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.marketing.educationQualification", b =>
                {
                    b.Navigation("employees");

                    b.Navigation("instructors");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.marketing.empDepartment", b =>
                {
                    b.Navigation("employees");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.marketing.employee", b =>
                {
                    b.Navigation("marktings");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.product.Experience", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("deliveryMen");

                    b.Navigation("technicians");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.puechase.purchaseMaster", b =>
                {
                    b.Navigation("purchaseDetails");

                    b.Navigation("stocks");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.puechase.purchaseOrderMaster", b =>
                {
                    b.Navigation("purchaseDetails");

                    b.Navigation("purchaseOrderDetalis");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.puechase.supplier", b =>
                {
                    b.Navigation("purchaseMasters");

                    b.Navigation("purchaseOrderMasters");

                    b.Navigation("stocks");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.sales.salesInvoiceMaster", b =>
                {
                    b.Navigation("InvoiceDetailsProducts");

                    b.Navigation("InvoiceReceivedDetails");

                    b.Navigation("cylinderReturns");

                    b.Navigation("journals");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.sales.salesMaster", b =>
                {
                    b.Navigation("salesDetails");

                    b.Navigation("salesInvoiceMasters");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.services.Appointment", b =>
                {
                    b.Navigation("Appointment_Details");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.services.AppointmentApproval", b =>
                {
                    b.Navigation("Approval_Details");

                    b.Navigation("Invoice_Details_Product");

                    b.Navigation("Invoice_Master");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.services.Feedback", b =>
                {
                    b.Navigation("AppointmentApproval");

                    b.Navigation("Approval_Details");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.services.Invoice_Master", b =>
                {
                    b.Navigation("Invoice_Details_Product");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.services.ProblemCategory", b =>
                {
                    b.Navigation("Appointment");

                    b.Navigation("AppointmentApproval");

                    b.Navigation("Appointment_Details");

                    b.Navigation("Approval_Details");

                    b.Navigation("Invoice_Details_Product");

                    b.Navigation("Invoice_Master");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.services.Service", b =>
                {
                    b.Navigation("Appointment");

                    b.Navigation("AppointmentApproval");

                    b.Navigation("Appointment_Details");

                    b.Navigation("Approval_Details");

                    b.Navigation("Invoice_Details_Product");

                    b.Navigation("Invoice_Master");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.technician_Delivary.deliveryMan", b =>
                {
                    b.Navigation("salesInvoiceMasters");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.technician_Delivary.technician", b =>
                {
                    b.Navigation("Feedback");

                    b.Navigation("Invoice_Master");

                    b.Navigation("appointmentApproveds");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.training.cours", b =>
                {
                    b.Navigation("courseSaleDetails");

                    b.Navigation("courseSchedules");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.training.courseSaleMaster", b =>
                {
                    b.Navigation("courseSaleDetails");
                });

            modelBuilder.Entity("FinalProject_eGasSheba.Model.training.instructor", b =>
                {
                    b.Navigation("courseSaleDetails");

                    b.Navigation("courseSchedules");
                });
#pragma warning restore 612, 618
        }
    }
}
